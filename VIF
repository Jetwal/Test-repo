# VIF 

from statsmodels.tools.tools import add_constant
X_train =add_constant(X_train)

from sklearn.base import BaseEstimator,TransformerMixin
from sklearn.preprocessing import Imputer
from statsmodels.stats.outliers_influence import variance_inflation_factor

class ReduceVIF(BaseEstimator,TransformerMixin):
    def __init__(self,thresh=2.5,impute=True,impute_strategy='median'):
        self.thresh=thresh
        
        if impute:
            self.imputer = Imputer(strategy=impute_strategy)
    def fit(self,X,y = None):
        print('ReduceVIF fit')
        if hasattr(self,'imputer'):
            self.imputer.fit(X)
        return self
    
    def transform(self,X,y=None):
        print ('ReduceVIF transform')
        columns=X.columns.tolist()
        if hasattr(self,'imputer'):
            X =pd.DataFrame(self.imputer.transform(X),columns=columns)
        return ReduceVIF.calculate_vif(X,self.thresh)
    @staticmethod
    def calculate_vif(X_train,thresh=2.5):
        
        dropped =True
        while dropped:
            variables=X_train.columns
            dropped =False
            vif = [variance_inflation_factor(X_train[variables].values,X_train.columns.get_loc(var)) for var in X_train.columns ]
            z=pd.DataFrame()
            z['vif_score']=vif
            z['features']=X_train.columns
            print(z)
            
            max_vif = max(vif)
            
            if max_vif > thresh:
                maxloc = vif.index(max_vif)
                print('Dropping',X.columns[maxloc],'with vif="',max_vif,'"')
                X_train = X_train.drop([X_train.columns.tolist()[maxloc]],axis=1)
                dropped=True
        print(vif)
        return X_train

transformer = ReduceVIF()
X_train_original=X_train.copy()
X_train = transformer.fit_transform(X_train,y_train)
